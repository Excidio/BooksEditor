@{
    ViewBag.Title = "BookEditor";
}
<div class="container-fluid">
    <div id="BookMasterList" class="col-xs-6 col-md-4">
        <div data-bind="foreach: books">
            <div class="well">
                <div class="form-group text-center">
                    <img data-bind="attr: {src: Image}" alt="Image" width="200" height="260"/>
                </div>
                <div class="form-group">
                    <h3 class="text-overflow-ellipsis" data-bind="text: Header"></h3>
                </div>
                <ul>
                    <li data-bind="click: $parent.EditForm">Edit Details</li>
                </ul>
            </div>
        </div>
    </div>

    <div class="col-xs-12 col-md-8" data-bind="with: selectedBook">
        @using (Html.BeginForm("Save", "Book", FormMethod.Post, new { enctype = "multipart/form-data", data_bind = "submit: saveBook" }))
        {
            @Html.AntiForgeryToken()
        <h4>Edit details</h4>
        <hr/>

            <div class="container">
                <div class="form-group">
                    <img id="Image" data-bind="attr: {src: Image}" alt="Image"/>
                    <div class="input-group">
                        <label class="input-group-btn">
                            <span class="btn btn-primary">
                                Browse… <input data-bind="event: {change: $parent.imageUpload}" type="file" accept="image/*" style="display: none;"/>
                            </span>
                        </label>
                        <input type="text" class="form-control" readonly="">
                    </div>
                    @*<br/>
                    <span class="btn btn-default btn-file">
                        Browse <input data-bind="event: {change: $parent.imageUpload}" type="file" accept="image/*" />
                    </span>*@
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2" for="Header">Header:</label>
                    <div class="col-md-10">
                        <input id="Header" class="form-control" type="text" data-bind="value: Header"/>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2" for="NumberOfPages">Number of pages:</label>
                    <div class="col-md-10">
                        <input id="NumberOfPages" class="form-control" type="number" data-bind="value: NumberOfPages"/>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2" for="PublishingHouse">Publishing house:</label>
                    <div class="col-md-10">
                        <input id="PublishingHouse" class="form-control" type="text" data-bind="value: PublishingHouse"/>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2" for="PublishingYear">Publishing year:</label>
                    <div class="col-md-10">
                        <input id="PublishingYear" class="form-control" type="number" data-bind="value: PublishingYear"/>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2" for="ISBN">ISBN:</label>
                    <div class="col-md-10">
                        <input id="ISBN" class="form-control" type="text" data-bind="value: ISBN"/>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default"/>
                    </div>
                </div>

            </div>
        }
    </div>
</div>

@section scripts
{
    <script>
        $(document).on('change', ':file', function () {
            var input = $(this),
                numFiles = input.get(0).files ? input.get(0).files.length : 1,
                label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
            input.trigger('fileselect', [numFiles, label]);
        });

        (function () {
            var BookViewModel = function (data) {
                var model = ko.validatedObservable({
                    Id: ko.observable(data && data.Id),
                    Header: ko.observable(data && data.Header).extend({ required: true, max: 30 }),
                    NumberOfPages: ko.observable(data && data.NumberOfPages).extend({ required: true, min: 0, max: 10000 }),
                    PublishingHouse: ko.observable(data && data.PublishingHouse).extend({ max: 30 }),
                    PublishingYear: ko.observable(data && data.PublishingYear).extend({ required: true, min: 1800 }),
                    ISBN: ko.observable(data && data.ISBN).extend({ required: true }),
                    Image: ko.observable(data && data.Image),

                    saveBook: function () {
                        if (model.errors().length === 0) {
                            $.ajax({
                                url: "api/Book/Edit",
                                type: "POST",
                                data: ko.toJSON(model),
                                contentType: "application/json; charset=utf-8",
                                async: false,
                                success: function (result) {
                                    //if (result.url) {
                                    //    location.href = result.url;
                                    //}
                                }
                            });
                        }
                        else {
                            model.errors.showAllMessages();
                        }
                    }
                });

                model.errors = ko.validation.group(model);

                return model;
            }

            var MSViewModel = function () {
                var self = this;

                self.books = ko.observableArray([]);
                self.selectedBook = ko.observable();

                self.EditForm = function (book) { self.selectedBook(book); };

                BookViewModel.errors = ko.validation.group(BookViewModel);

                self.imageUpload = function(data, e) {
                    var file = e.target.files[0];
                    var reader = new FileReader();

                    reader.onloadend = function() {
                        data.Image(reader.result);
                    };

                    if (file) {
                        reader.readAsDataURL(file);
                    }
                };

                self.loadBooks = function () {
                    $.ajax({
                        url: "api/Book/GetAll",
                        type: "GET"
                    }).done(function (data) {
                        var mappedBooks = $.map(data, function (item) { return new BookViewModel(item); });
                        
                        mappedBooks.push(new BookViewModel());
                        self.books(mappedBooks);
                    }).error(function (err) {
                        //self.ErrorMessage("Error!!!!" + err.status);
                    });
                };

                //$.getJSON("/tasks", function (allData) {
                //    var mappedTasks = $.map(allData, function (item) { return new Task(item) });
                //    self.tasks(mappedTasks);
                //});

                self.loadBooks();                
            };

            ko.applyBindings(new MSViewModel());
        })();
    </script>
}

<style type="text/css">
    .text-overflow-ellipsis {
        -moz-text-overflow: ellipsis;
        text-overflow: ellipsis;
        overflow: hidden;
    }

    .btn-file {
        position: relative;
        overflow: hidden;
    }
    .btn-file input[type=file] {
        position: absolute;
        top: 0;
        right: 0;
        min-width: 100%;
        min-height: 100%;
        font-size: 100px;
        text-align: right;
        filter: alpha(opacity=0);
        opacity: 0;
        outline: none;
        background: white;
        cursor: inherit;
        display: block;
    }
    .validationMessage {
        color: #b20000;
    }
</style>
